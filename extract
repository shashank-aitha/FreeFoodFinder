import os.path
import base64
import json
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

def authenticate_gmail_api():
    """Authenticate and return a service object for Gmail API."""
    
    creds = None
    if os.path.exists('token.json'):
        with open('token.json', 'r') as token:
            creds = Credentials.from_authorized_user_file('token.json')

    # If there are no valid credentials available, prompt the user to log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
            with open('token.json', 'w') as token:
                token.write(creds.to_json())

    # Create the Gmail API service
    service = build('gmail', 'v1', credentials=creds)
    return service


def read_emails(service, max_results=10):
    """Read emails using the Gmail API."""
    
    results = service.users().messages().list(userId='me', maxResults=max_results, q="is:unread").execute()
    messages = results.get('messages', [])

    email_data = []

    for message in messages:
        msg = service.users().messages().get(userId='me', id=message['id']).execute()
        
        # Decode email subject and body
        email_subject = ""
        email_body = ""
        for header in msg['payload']['headers']:
            if header['name'] == 'Subject':
                email_subject = header['value']
        
        try:
            email_body = base64.urlsafe_b64decode(msg['payload']['parts'][0]['body']['data']).decode("utf-8")
        except:
            email_body = "Error decoding email body."

        email_data.append({
            "Subject": email_subject,
            "Body": email_body
        })

    return email_data

def main():
    service = authenticate_gmail_api()
    emails = read_emails(service)

    for email in emails:
        print("Subject:", email["Subject"])
        print("Body:", email["Body"])
        print("===============================================")

if __name__ == '__main__':
    main()
